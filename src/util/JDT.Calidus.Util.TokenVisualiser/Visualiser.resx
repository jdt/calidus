<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="statusStrip.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="rtSource.Text" xml:space="preserve">
    <value>#region License
    // &lt;copyright&gt;
    //   Copyright 2009 Jesper De Temmerman 
    //   Licensed under the Apache License, Version 2.0 (the "License"); 
    //   you may not use this file except in compliance with the License. 
    //   You may obtain a copy of the License at
    //
    //   http://www.apache.org/licenses/LICENSE-2.0 
    //
    //   Unless required by applicable law or agreed to in writing, software 
    //   distributed under the License is distributed on an "AS IS" BASIS, 
    //   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
    //   See the License for the specific language governing permissions and 
    //   limitations under the License. 
    // &lt;/copyright&gt;
#endregion

using System;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using JDT.Calidus.Common.Rules;
using JDT.Calidus.GUI.Controls;
using JDT.Calidus.Projects;
using JDT.Calidus.Rules;
using JDT.Calidus.UI.Controllers;
using JDT.Calidus.UI.Model;
using JDT.Calidus.UI.Views;
using JDT.Calidus.UI.Events;

namespace JDT.Calidus.GUI
{
    /// &lt;summary&gt;
    /// This class is the forms-based implementation of the IMainView interface
    /// &lt;/summary&gt;
    public partial class MainWindow : Form, IMainView
    {
        private static String WINDOW_TITLE = "Calidus GUI Runner - {0}";
        private static String HAS_CHANGES = "*";

        private String _projectName;

        public MainWindow()
        {
            InitializeComponent();
        }

        #region Form events

            protected override void OnLoad(EventArgs e)
            {
                base.OnLoad(e);

                //MainController controller = new MainController(this);
            }

            private void MainWindow_FormClosing(object sender, FormClosingEventArgs e)
            {
                QuitEventArgs quit = new QuitEventArgs();
                OnQuit(quit);
                e.Cancel = quit.Cancel;
            }

        #endregion

        #region Menu events

            private void configurationToolStripMenuItem_Click(object sender, EventArgs e)
            {
                OnRuleConfiguration();                
            }

            private void settingsToolStripMenuItem_Click(object sender, EventArgs e)
            {
                OnProjectConfiguration();
            }

            private void openToolStripMenuItem_Click(object sender, EventArgs e)
            {
                OnOpen();
            }

            private void saveToolStripMenuItem_Click(object sender, EventArgs e)
            {
                OnSave();
            }

            private void exitToolStripMenuItem_Click(object sender, EventArgs e)
            {
                Close();
            }

        #endregion

        /// &lt;summary&gt;
        /// Exits the application
        /// &lt;/summary&gt;
        public void Exit()
        {
            Close();
        }

        /// &lt;summary&gt;
        /// Signals the beginning of a long-running operation
        /// &lt;/summary&gt;
        public void BeginWait()
        {
            Cursor = Cursors.WaitCursor;
        }

        /// &lt;summary&gt;
        /// Signals the end of a long-running operation
        /// &lt;/summary&gt;
        public void EndWait()
        {
            Cursor = Cursors.Default;
        }

        /// &lt;summary&gt;
        /// Marks changes to the project
        /// &lt;/summary&gt;
        /// &lt;param name="_hasChanges"&gt;True if changed, otherwise false&lt;/param&gt;
        public void ProjectHasChanges(bool hasChanges)
        {
            String name = "";
            if (hasChanges)
                name = String.Format(_projectName + "{0}", HAS_CHANGES);
            else
                name = String.Format(_projectName + "{0}", String.Empty);

            Text = String.Format(WINDOW_TITLE, name);
        }

        /// &lt;summary&gt;
        /// Sets the current rpoject
        /// &lt;/summary&gt;
        public String SelectedProject
        {
            set { _projectName = value; }
        }

        /// &lt;summary&gt;
        /// Prompts the UI to confirm saving changes
        /// &lt;/summary&gt;
        /// &lt;returns&gt;The confirmation result&lt;/returns&gt;
        public Confirm ConfirmSaveChanges()
        {
            DialogResult res = MessageBox.Show(this, "The project has unsaved changes. Do you want to save changes?", "Warning", MessageBoxButtons.YesNoCancel, MessageBoxIcon.Warning);
            if (res == DialogResult.Yes)
                return Confirm.Yes;
            if (res == DialogResult.No)
                return Confirm.No;

            return Confirm.Cancel;
        }

        /// &lt;summary&gt;
        /// Browses for a project file
        /// &lt;/summary&gt;
        /// &lt;returns&gt;The result&lt;/returns&gt;
        public FileBrowseResult OpenProjectFile()
        {
            return Dialogs.ShowOpenCalidusProjectFileDialog(this);
        }

        /// &lt;summary&gt;
        /// Displays the project configuration for the model
        /// &lt;/summary&gt;
        /// &lt;param name="model"&gt;The model to display for&lt;/param&gt;
        public void ShowProjectConfiguration(ICalidusProjectModel model)
        {
            ProjectConfigurationWindow win = new ProjectConfigurationWindow(model);
            win.ShowDialog(this);
        }

        /// &lt;summary&gt;
        /// Displays the rule configuration
        /// &lt;/summary&gt;
        public void ShowRuleConfiguration()
        {
            RuleConfigurationWindow win = new RuleConfigurationWindow();
            win.ShowDialog(this);
        }

        #region Views

            /// &lt;summary&gt;
            /// Gets the status view
            /// &lt;/summary&gt;
            public IStatusView StatusView
            {
                get { return statusView; }
            }

            /// &lt;summary&gt;
            /// Gets the rule runner view
            /// &lt;/summary&gt;
            public IRuleRunnerView RuleRunnerView
            {
                get { return ruleRunnerView; }
            }

            /// &lt;summary&gt;
            /// Gets the source location view
            /// &lt;/summary&gt;
            public ISourceLocationView SourceLocationView
            {
                get { return sourceLocationView; }
            }

            /// &lt;summary&gt;
            /// Gets the checkabel rule tree view
            /// &lt;/summary&gt;
            public ICheckableRuleTreeView CheckableRuleTreeView
            {
                get { return checkableRuleTreeView; }
            }

            /// &lt;summary&gt;
            /// Gets the file list view
            /// &lt;/summary&gt;
            public IFileTreeView FileListView
            {
                get { return fileListView; }
            }

            /// &lt;summary&gt;
            /// Gets the violation list view
            /// &lt;/summary&gt;
            public IViolationListView ViolationListView
            {
                get { return violationListView; }
            }

        #endregion

        #region View Events

            /// &lt;summary&gt;
            /// Notifies that the quit was called
            /// &lt;/summary&gt;
            public event EventHandler&lt;QuitEventArgs&gt; Quit;
            private void OnQuit(QuitEventArgs e)
            {
                if (Quit != null)
                    Quit(this, e);
            }

            /// &lt;summary&gt;
            /// Notifies that open was called
            /// &lt;/summary&gt;
            public event EventHandler&lt;EventArgs&gt; Open;
            private void OnOpen()
            {
                if (Open != null)
                    Open(this, new EventArgs());
            }

            /// &lt;summary&gt;
            /// Notifies that save was called
            /// &lt;/summary&gt;
            public event EventHandler&lt;EventArgs&gt; Save;
            private void OnSave()
            {
                if (Save != null)
                    Save(this, new EventArgs());
            }

            /// &lt;summary&gt;
            /// Notifies that project configuration was called
            /// &lt;/summary&gt;
            public event EventHandler&lt;EventArgs&gt; ProjectConfiguration;
            private void OnProjectConfiguration()
            {
                if (ProjectConfiguration != null)
                    ProjectConfiguration(this, new EventArgs());
            }

            /// &lt;summary&gt;
            /// Notifies that rule configuration was called
            /// &lt;/summary&gt;
            public event EventHandler&lt;EventArgs&gt; RuleConfiguration;
            private void OnRuleConfiguration()
            {
                if (RuleConfiguration != null)
                    RuleConfiguration(this, new EventArgs());
            }

        #endregion
    }
}</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>79</value>
  </metadata>
</root>